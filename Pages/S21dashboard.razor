@using BlazorCitylife.Models
@using CityLife
@using BlazorCitylife.Data
@page "/S21dashboard"
@inject CitylifeDBService  cityLifeDB
@inject NavigationManager NavigationManager;
@inject TranslateBox tBox



<link rel="stylesheet" href="/css/dashboard.css" />
<div class="main-wrapper reset-indent">
    <form id="fromDateForm" method="get" action="s21Dashboard">
        <div class="page-heading">

            @tBox.translate("Dashboard")
            <span>(@cityLifeDB.FromDate.ToShortDateString())</span>
            <input type="checkbox" name="wideDashboard" checked="@wideDashboard" @onchange="WideClicked" />Wide
            <label for="datepickerBtn" class="datepicker-btn">
                <input type="date" id="datepickerBtn" name="fromDate" @bind="@fromDate">
            </label>
        </div>
    </form>



    <!--<span id="highlightOrderId" data-order-id="@highlightOrderId"></span>-->  <!--keep the order which needs to be highlighted (or 0 if none -->
    <div style="display:flex">
        @*first column - apartment numbers, rev, expense and maid*@
        <div class="dash01">
            <table>
                <tr><td class="dash01td">date</td></tr>
                <tr><td class="dash01td">day</td></tr>
                @foreach (var anApartment in apartmentDayBlocks)
                {
                    int apartmentNumber = anApartment.First().apartmentNumber;
                    if (apartmentNumber > 0)
                    {
                        //this is a real apartment
                        <tr><td class="dash01td @high">@apartmentNumber</td></tr>
                    }
                    else
                    {
                        //This is a "waiting" apartment
                        <tr><td class="dash01td @high">Wt</td></tr>
                    }

                }
                <tr><td>rev.</td></tr>
                <tr><td>exp</td></tr>
                <tr><td>maid</td></tr>
            </table>
        </div>
        @*the table with all orders*@
        <div class="dash02">
            <table style="table-layout:fixed; width:100%">
                @*line 1 - date line*@
                <tr>
                    @{ var lastDate = fromDate.AddDays(dashboardDays);}
                    @for (DateTime aDate = fromDate; aDate < lastDate; aDate = aDate.AddDays(1))
                    {
                        string todaysBackground = (aDate.Date == today.Date ? "today" : "");  //Check if the date is today - put a different color
                        string weekendBackground = "";
                        if (aDate.Date.DayOfWeek == DayOfWeek.Sunday || aDate.Date.DayOfWeek == DayOfWeek.Saturday)
                        {
                            //This is a weekend - highlight the column header in orange
                            weekendBackground = "weekend";
                        }

                        <th class="dash02th @wide @weekendBackground @todaysBackground">@aDate.ToString("dd/MM")</th>
                        <!--"wide" will make a wider column-->
                    }
                    <th class="dash02th"></th>
                    <th class="dash02th"></th>
                    <th class="dash02th"></th>
                </tr>
                @*line 2 - day line*@
                <tr>
                    @for (DateTime aDate = fromDate; aDate < lastDate; aDate = aDate.AddDays(1))
                    {
                        string todaysBackground = (aDate.Date == today.Date ? "today" : "");  //Check if the date is today - put a different color
                        <th class="dash02th @wide @todaysBackground">@aDate.ToString("ddd")</th>
                    }
                    <th class="dash02th">@tBox.translate("revenue")</th>
                    <th class="dash02th">@tBox.translate("occ%")</th>
                    <th class="dash02th">@tBox.translate("days")</th>
                </tr>

                @*line 3 and above - order lines (1 line for each apartment)*@
                @{
                    int apartmentI = 0;
                    int realApartmentCount = 0;
                    double totalOccupancyPercent = 0d;
                    double totalDaysPerRent = 0d;

                }
                @foreach (var anApartment in apartmentDayBlocks)
                {

                    <tr style="background-color:@backgroundColors[colorIndex]">
                        @{
                            colorIndex++;
                            colorIndex %= backgroundColors.Count();  //Advance the color index, and wrap around in case it is larger than the array
                                                                     //of available colors
                        }
                        @foreach (var aDayBlock in anApartment)
                        {
                            if (aDayBlock.status == OrderStatus.Free)
                            {
                                //This is a free day
                                <td class="dash02td @wide @high" data-apartment-id="@anApartment.First().apartmentNumber"
                                    data-date="@aDayBlock.firstDate" onclick="addOrder(this)"></td>
                            }
                            else
                            {
                                //This is a busy day (or days)
                                string line1;
                                string line2;
                                string line3 = "";
                                if (wideDashboard == "checked")
                                {
                                    //This is a wide dashboard. Prepare the data that should be displayed on the order line
                                    line1 = aDayBlock.phone + " (" + aDayBlock.adults + "+" + aDayBlock.children + ") " + aDayBlock.name;
                                    line2 = aDayBlock.price + "/" + aDayBlock.paid + " - " + aDayBlock.checkout.ToString("dd/MM/yyyy");
                                    line3 = aDayBlock.expectedArrival + " " + aDayBlock.staffComments;
                                }
                                else
                                {
                                    line1 = aDayBlock.name;
                                    line2 = aDayBlock.price;
                                }
                                string color = aDayBlock.orderColor.ToString();
                                string cssColor = "order" + color;   //e.g. orderRed, orderGreen - we prepared such CSS classes

                                <td class="dash02td @wide @high @cssColor" colspan="@aDayBlock.days"
                                    @onclick="()=>ShowOrder(aDayBlock.orderId)">
                                    @line1 <br /> @line2 <br />@line3
                                </td>
                            }
                        }
                        <td class="dash02td rightAlign">@revenuePerApartment[apartmentI].toMoneyString()</td>
                        <td class="=dash02td rightAlign">@percentOccupancyPerApartment[apartmentI]%</td>
                        <td class="=dash02td rightAlign">@string.Format("{0:F1}", aveargeDaysPerApartment[apartmentI])</td>
                        @{
                            if (anApartment.First().apartmentNumber > 0)
                            {
                                //This is a real apartment - calculate the percentage average and the average rent days
                                totalOccupancyPercent += percentOccupancyPerApartment[apartmentI];
                                totalDaysPerRent += aveargeDaysPerApartment[apartmentI];
                                realApartmentCount++;
                            }
                            apartmentI++;

                        }
                    </tr>
                }
                @*Revenu total line*@
                <tr>
                    @{ var totalRevenue = new Money(0m, "UAH");}
                    @foreach (var aRevenue in revenuePerDay)
                    {
                        if (aRevenue.isZero())
                        {
                            <td class="dash02td"></td>
                        }
                        else
                        {
                            <td class="dash02td">@aRevenue.toMoneyString(showCents: false)</td>
                            totalRevenue += aRevenue;


                        }
                    }
                    @{
                        int averageOccupancyPercent = (int)Math.Round(totalOccupancyPercent / realApartmentCount);
                        double averageDaysPerRent = totalDaysPerRent / realApartmentCount;
                    }
                    <td class="dash02td dash02total rightAlign">@totalRevenue.toMoneyString()</td>
                    <td class="dash02td dash02total rightAlign">@averageOccupancyPercent%</td>
                    <td class="dash02td dash02total rightAlign">@string.Format("{0:F1}", averageDaysPerRent)</td>
                </tr>

                @*Expense total line*@
                @{
                    DateTime theDate = fromDate;
                }
                <tr>
                    @{ var totalExpense = new Money(0m, "UAH");}
                    @foreach (var anExpense in expensePerDay)
                    {
                        if (anExpense.isZero())
                        {
                            <td class="dash02td selectCell" data-date='@theDate.ToString("yyyy-MM-dd")' onclick="expenseClicked(this,false)"></td>
                        }
                        else
                        {
                            <td class="dash02td selectCell" data-date='@theDate.ToString("yyyy-MM-dd")' onclick="expenseClicked(this,true)">
                                @anExpense.toMoneyString(showCents: false)
                            </td>
                            totalExpense += anExpense;
                        }
                        theDate = theDate.AddDays(1);
                    }
                    <td class="dash02td dash02total rightAlign">@totalExpense.toMoneyString()</td>
                    <td class="dash02td rightAlign"></td>
                    <td class="dash02td rightAlign"></td>
                </tr>

                @*Maid on duty line*@
                @{
                    theDate = fromDate;
                }
                <tr>
                    @foreach (var anEmpWorkDay in empWorkDaysArray)
                    {
                        if (anEmpWorkDay == null)
                        {
                            <td class="dash02td selectCell" onclick="displayMaidList(this)" data-emp-id="0"
                                data-date='@theDate.ToString("yyyy-MM-dd")'></td>
                            @*date-emp-id=0 denotes that an employee is not assigned to that day
                                date-date gives the date of the current cell*@
                        }
                        else
                        {
                            string greenCss = "";
                            if (anEmpWorkDay.IsSalaryDay)
                            {
                                greenCss = "orderGreen";
                            }
                            <td class="dash02td @greenCss selectCell" onclick="displayMaidList(this)"
                                data-emp-id="@anEmpWorkDay.Employee.Id"
                                data-date='@theDate.ToString("yyyy-MM-dd")'>
                                @anEmpWorkDay.Employee.Name
                            </td>
                        }
                        theDate = theDate.AddDays(1);
                    }
                    <td class="dash02td dash02total rightAlign">@((totalRevenue - totalExpense).toMoneyString())</td>
                    <td class="dash02td rightAlign"></td>
                    <td class="dash02td rightAlign"></td>

                </tr>

            </table>
        </div>
    </div>
    <div style="padding:2px;">@tBox.translate("Total revenue"):@totalRevenue.toMoneyString(showCents: false)</div>
    @if (theOrderData != null)
    {
        <S22OrderDetails theOrderData="theOrderData"></S22OrderDetails>
    }


</div>

@code
{
    List<Money> revenuePerDay = null;
    List<Money> expensePerDay = null;
    List<string> expenseTypes = null;
    EmployeeWorkDay[] empWorkDaysArray = null;
    List<Employee> maidList = null;
    List<Money> revenuePerApartment = null;
    List<double> aveargeDaysPerApartment = null;
    List<int> percentOccupancyPerApartment = null;
    List<List<DayBlock>> apartmentDayBlocks;
    private DateTime _fromDate;
    OrderData theOrderData = null;
    DateTime fromDate
    {
        get { return _fromDate; }
        set
        {
            _fromDate = value;
            GetDashboardData(_fromDate);
        }
    }
    int dashboardDays;
    DateTime today = FakeDateTime.Now;
    string wideDashboard = "";   //or "checked";
    int highlightOrderId = 0;  //TBD id of the order which should be highlighted.
    string wide => wideDashboard == "checked" ? "wide" : "";
    string high => wideDashboard == "checked" ? "high" : "";
    string[] backgroundColors = { "aliceblue", "antiquewhite", "gainsboro", "lavender", "lightskyblue", "lemonchiffon" };
    int colorIndex = 0;

    protected override void OnInitialized()
    {
        if (cityLifeDB.LoggedinUser == null)
        {
            NavigationManager.NavigateTo("/s10login");
        }
        fromDate = cityLifeDB.FromDate;
        tBox.Init("ru", "en", "showAsterisk");

        base.OnInitialized();
    }

    public void GetDashboardData(DateTime startDate)
    {
        //Currntly for both normal mode and wide mode we dislay 31 days. The number of days can be set here.
        //We display one month. The calculation is: the number of days displayed are equal to the month length of the starting month.
        //In most cases this will yield an end date which is one less that the starting date. The only exception is January 30 and 31, which will
        //end at 1 or 2 of March.
        //For example: start date    end date
        //             10/11/2019    9/12/2019
        //             31/12/2019    30/1/2020
        //             30/1/2019     1/3/2019 (except for leap year, where it will be 29/2/2020)
        //             1/11/2019     30/11/2019
        //             1/12/2019     31/12/2019
        //             1/2/2020      29/2/2020 (2020 is leap year)
        dashboardDays = FakeDateTime.monthLength(startDate);


        apartmentDayBlocks = cityLifeDB.s21dashboardPreparation(
            startDate,
            dashboardDays,
            ref revenuePerDay,
            ref expensePerDay,
            ref expenseTypes,
            ref revenuePerApartment,
            ref aveargeDaysPerApartment,
            ref percentOccupancyPerApartment,
            ref empWorkDaysArray,
            ref maidList);

    }

    public void WideClicked(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            wideDashboard = "checked";
        }
        else
        {
            wideDashboard = "";
        }

    }

    public void ShowOrder(int orderId)
    {
        theOrderData = cityLifeDB.s22OrderDetails(orderId);
    }
}           